{"version":3,"sources":["Greetings.tsx","Counter.tsx","MyForm.tsx","CounterReducer.tsx","Reducer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Greetings","name","mark","optional","onClick","defaultProps","Counter","useState","count","setCount","MyForm","onSubmit","inputRef","useRef","description","form","setForm","onChange","e","target","value","preventDefault","current","focus","ref","type","reducer","state","action","Error","CounterReducer","useReducer","dispatch","text","color","isGood","ReducerSample","App","console","log","Reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.708d0a23.chunk.js","sourcesContent":["import React from \"react\";\n\ntype GreetingsProps = {\n  name: string;\n  mark: string;\n  optional?: string;\n  onClick: (name: string) => void;\n};\n\n/*\n* React.FC는 props의 타입을 제너릭스로 넣어서 사용한다\n\n장점\n1. props에 기본적으로 children이 들어감\n\n\nconst Greetings: React.FC<GreetingsProps> = ({ name, mark, ...props }) => (\n  <div>\n    Hello, {name} {mark}\n  </div>\n);\n\n// App에서 값을 바로 넘겨주기 때문에 결과적으로 defaultProps가 의미가 없어짐 : React.FC를 쓰면 안되는 이유\n\n// App에서 props를 안써서 안넘겨주면 에러가나버림. 그럴꺼면 defaultProps를 왜쓰니?\nGreetings.defaultProps = {\n  mark: \"!\",\n};\n\n그래서 이렇게 바꿔줄꺼야. ReactFC만 안쓰면됨 \n*/\n\n/*\n결론적으로 REact.FC를 안쓰면 불러오는 컴포넌트에서 props를 생략해도 \ndefaultProps로 인해 넣어진다.\n\nconst Greetings = ({ name, mark }: GreetingsProps) => (\n  <div>\n    Hello, {name} {mark}\n  </div>\n);\n\n화살표함수가 아닌 함수버전\n*/\n\nfunction Greetings({ name, mark, optional, onClick }: GreetingsProps) {\n  const handleClick = () => onClick(name);\n  return (\n    <div>\n      Hello, {name} {mark}\n      {optional && <p>{optional}</p>}\n      <div>\n        <button onClick={handleClick}>Click Me</button>\n      </div>\n    </div>\n  );\n}\n\nGreetings.defaultProps = {\n  mark: \"!\",\n};\n\nexport default Greetings;\n","import { isPrimitive } from \"util\";\nimport { ifError } from \"assert\";\n\nimport React, { useState } from \"react\";\n\nfunction Counter() {\n  const [count, setCount] = useState<number>(0);\n  const addCount = () => {\n    setCount(count + 1);\n  };\n\n  const removeCount = () => {\n    setCount(count - 1);\n  };\n\n  return (\n    <div>\n      <h1> {count} </h1>\n      <div>\n        <button onClick={addCount}>+1</button>\n        <button onClick={removeCount}>+2</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Counter;\n","import React, { useState, useRef } from \"react\";\n\ntype MyFormProps = {\n  onSubmit: (form: { name: string; description: string }) => void;\n};\n\nfunction MyForm({ onSubmit }: MyFormProps) {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [form, setForm] = useState({\n    name: \"\",\n    description: \"\",\n  });\n\n  // form.name 대신에 name이라고 쓸게!\n  const { name, description } = form;\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setForm({\n      ...form,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    onSubmit(form);\n    setForm({\n      name: \"\",\n      description: \"\",\n    });\n    if (!inputRef.current) {\n      return;\n    }\n    inputRef.current.focus();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input name=\"name\" value={name} onChange={onChange} ref={inputRef} />\n      <input name=\"description\" value={description} onChange={onChange} />\n      <button type=\"submit\">등록</button>\n    </form>\n  );\n}\n\nexport default MyForm;\n","import React, { useReducer } from \"react\";\n\ntype Action = { type: \"INCREASE\" } | { type: \"DECREASE\" };\n\nfunction reducer(state: number, action: Action): number {\n  switch (action.type) {\n    case \"INCREASE\":\n      return state + 1;\n    case \"DECREASE\":\n      return state - 1;\n    default:\n      throw new Error(\"Unhandled action\");\n  }\n}\n\nfunction CounterReducer() {\n  const [count, dispatch] = useReducer(reducer, 0);\n  const onIncrease = () => dispatch({ type: \"INCREASE\" });\n  const onDecrease = () => dispatch({ type: \"DECREASE\" });\n  return (\n    <div>\n      <h1>{count}</h1>\n      <button onClick={onIncrease}>+1</button>\n      <button onClick={onDecrease}>-1</button>\n    </div>\n  );\n}\n\nexport default CounterReducer;\n","import React, { useReducer } from \"react\";\n\ntype Color = \"red\" | \"orange\" | \"yellow\";\n\ninterface State {\n  count: number;\n  text: string;\n  color: Color;\n  isGood: boolean;\n}\n\ntype Action =\n  | { type: \"SET_COUNT\"; count: number }\n  | { type: \"SET_TEXT\"; text: string }\n  | { type: \"SET_COLOR\"; color: Color }\n  | { type: \"TOGGLE_GOOD\" };\n\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case \"SET_COUNT\":\n      return {\n        ...state, // 얘 안써주면 count만 남고 다 사라져\n        count: action.count,\n      };\n    case \"SET_TEXT\":\n      return {\n        ...state,\n        text: action.text,\n      };\n    case \"SET_COLOR\":\n      return {\n        ...state,\n        color: action.color,\n      };\n    case \"TOGGLE_GOOD\":\n      return {\n        ...state,\n        isGood: !state.isGood,\n      };\n    default:\n      throw new Error(\"실패\");\n  }\n}\n\nfunction ReducerSample() {\n  const [state, dispatch] = useReducer(reducer, {\n    count: 0,\n    text: \"hello\",\n    color: \"red\",\n    isGood: true,\n  });\n\n  const setCount = () => {\n    dispatch({ type: \"SET_COUNT\", count: 5 });\n  };\n\n  const setText = () => {\n    dispatch({ type: \"SET_TEXT\", text: \"poburi\" });\n  };\n  const setColor = () => {\n    dispatch({ type: \"SET_COLOR\", color: \"orange\" });\n  };\n  const toggleGood = () => {\n    dispatch({ type: \"TOGGLE_GOOD\" });\n  };\n  return (\n    <div>\n      <p>\n        <code>count: </code> {state.count}\n      </p>\n      <p>\n        <code>text: </code> {state.text}\n      </p>\n      <p>\n        <code>color: </code> {state.color}\n      </p>\n      <p>\n        <code>isGood: </code> {state.isGood ? \"true\" : \"false\"}\n      </p>\n      <div>\n        <button onClick={setCount}>SET_COUNT</button>\n        <button onClick={setText}>SET_TEXT</button>\n        <button onClick={setColor}>SET_COLOR</button>\n        <button onClick={toggleGood}>TOGGLE_GOOD</button>\n      </div>\n    </div>\n  );\n}\n\nexport default ReducerSample;\n","import React from \"react\";\nimport Greetings from \"./Greetings\";\nimport Count from \"./Counter\";\nimport MyForm from \"./MyForm\";\nimport CounterReducer from \"./CounterReducer\";\nimport Reducer from \"./Reducer\";\n\nconst App: React.FC = () => {\n  const onClick = (name: string) => {\n    console.log(`${name} says hello`);\n  };\n\n  const onSubmit = (form: { name: string; description: string }) => {\n    console.log(form);\n  };\n  return (\n    <>\n      <Greetings name=\"Poburi\" onClick={onClick} />\n      <Count />\n      <MyForm onSubmit={onSubmit} />\n      <CounterReducer />\n      <Reducer />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}